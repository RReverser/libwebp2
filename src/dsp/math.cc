// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------
//
// Misc. common math functions
//
// Authors: vrabaud (vincent.rabaud@google.com)
//

#include "src/dsp/math.h"

#include <cassert>
#include <cmath>
#include <cstdint>
#include <numeric>
#include <cstring>

#include "src/dsp/dsp.h"

//------------------------------------------------------------------------------

// The threshold till approximate version of log_2 can be used.
// Practically, we can get rid of the call to log() as the two values match to
// very high degree (the ratio of these two is 0.99999x).
// Keeping a high threshold for now.
constexpr uint32_t kApproxLogWithCorrectionMax = 65536;
constexpr uint32_t kApproxLogMax = 2;

// lookup table for small values of log2(int)
const float kWP2Log2Table[kLogLookupIdxMax] = {
    0.0000000000000000f, 0.0000000000000000f,
    1.0000000000000000f, 1.5849625007211560f,
    2.0000000000000000f, 2.3219280948873621f,
    2.5849625007211560f, 2.8073549220576041f,
    3.0000000000000000f, 3.1699250014423121f,
    3.3219280948873621f, 3.4594316186372973f,
    3.5849625007211560f, 3.7004397181410921f,
    3.8073549220576041f, 3.9068905956085187f,
    4.0000000000000000f, 4.0874628412503390f,
    4.1699250014423121f, 4.2479275134435852f,
    4.3219280948873626f, 4.3923174227787606f,
    4.4594316186372973f, 4.5235619560570130f,
    4.5849625007211560f, 4.6438561897747243f,
    4.7004397181410917f, 4.7548875021634682f,
    4.8073549220576037f, 4.8579809951275718f,
    4.9068905956085187f, 4.9541963103868749f,
    5.0000000000000000f, 5.0443941193584533f,
    5.0874628412503390f, 5.1292830169449663f,
    5.1699250014423121f, 5.2094533656289501f,
    5.2479275134435852f, 5.2854022188622487f,
    5.3219280948873626f, 5.3575520046180837f,
    5.3923174227787606f, 5.4262647547020979f,
    5.4594316186372973f, 5.4918530963296747f,
    5.5235619560570130f, 5.5545888516776376f,
    5.5849625007211560f, 5.6147098441152083f,
    5.6438561897747243f, 5.6724253419714951f,
    5.7004397181410917f, 5.7279204545631987f,
    5.7548875021634682f, 5.7813597135246599f,
    5.8073549220576037f, 5.8328900141647412f,
    5.8579809951275718f, 5.8826430493618415f,
    5.9068905956085187f, 5.9307373375628866f,
    5.9541963103868749f, 5.9772799234999167f,
    6.0000000000000000f, 6.0223678130284543f,
    6.0443941193584533f, 6.0660891904577720f,
    6.0874628412503390f, 6.1085244567781691f,
    6.1292830169449663f, 6.1497471195046822f,
    6.1699250014423121f, 6.1898245588800175f,
    6.2094533656289501f, 6.2288186904958804f,
    6.2479275134435852f, 6.2667865406949010f,
    6.2854022188622487f, 6.3037807481771030f,
    6.3219280948873626f, 6.3398500028846243f,
    6.3575520046180837f, 6.3750394313469245f,
    6.3923174227787606f, 6.4093909361377017f,
    6.4262647547020979f, 6.4429434958487279f,
    6.4594316186372973f, 6.4757334309663976f,
    6.4918530963296747f, 6.5077946401986963f,
    6.5235619560570130f, 6.5391588111080309f,
    6.5545888516776376f, 6.5698556083309478f,
    6.5849625007211560f, 6.5999128421871278f,
    6.6147098441152083f, 6.6293566200796094f,
    6.6438561897747243f, 6.6582114827517946f,
    6.6724253419714951f, 6.6865005271832185f,
    6.7004397181410917f, 6.7142455176661224f,
    6.7279204545631987f, 6.7414669864011464f,
    6.7548875021634682f, 6.7681843247769259f,
    6.7813597135246599f, 6.7944158663501061f,
    6.8073549220576037f, 6.8201789624151878f,
    6.8328900141647412f, 6.8454900509443747f,
    6.8579809951275718f, 6.8703647195834047f,
    6.8826430493618415f, 6.8948177633079437f,
    6.9068905956085187f, 6.9188632372745946f,
    6.9307373375628866f, 6.9425145053392398f,
    6.9541963103868749f, 6.9657842846620869f,
    6.9772799234999167f, 6.9886846867721654f,
    7.0000000000000000f, 7.0112272554232539f,
    7.0223678130284543f, 7.0334230015374501f,
    7.0443941193584533f, 7.0552824355011898f,
    7.0660891904577720f, 7.0768155970508308f,
    7.0874628412503390f, 7.0980320829605263f,
    7.1085244567781691f, 7.1189410727235076f,
    7.1292830169449663f, 7.1395513523987936f,
    7.1497471195046822f, 7.1598713367783890f,
    7.1699250014423121f, 7.1799090900149344f,
    7.1898245588800175f, 7.1996723448363644f,
    7.2094533656289501f, 7.2191685204621611f,
    7.2288186904958804f, 7.2384047393250785f,
    7.2479275134435852f, 7.2573878426926521f,
    7.2667865406949010f, 7.2761244052742375f,
    7.2854022188622487f, 7.2946207488916270f,
    7.3037807481771030f, 7.3128829552843557f,
    7.3219280948873626f, 7.3309168781146167f,
    7.3398500028846243f, 7.3487281542310771f,
    7.3575520046180837f, 7.3663222142458160f,
    7.3750394313469245f, 7.3837042924740519f,
    7.3923174227787606f, 7.4008794362821843f,
    7.4093909361377017f, 7.4178525148858982f,
    7.4262647547020979f, 7.4346282276367245f,
    7.4429434958487279f, 7.4512111118323289f,
    7.4594316186372973f, 7.4676055500829976f,
    7.4757334309663976f, 7.4838157772642563f,
    7.4918530963296747f, 7.4998458870832056f,
    7.5077946401986963f, 7.5156998382840427f,
    7.5235619560570130f, 7.5313814605163118f,
    7.5391588111080309f, 7.5468944598876364f,
    7.5545888516776376f, 7.5622424242210728f,
    7.5698556083309478f, 7.5774288280357486f,
    7.5849625007211560f, 7.5924570372680806f,
    7.5999128421871278f, 7.6073303137496104f,
    7.6147098441152083f, 7.6220518194563764f,
    7.6293566200796094f, 7.6366246205436487f,
    7.6438561897747243f, 7.6510516911789281f,
    7.6582114827517946f, 7.6653359171851764f,
    7.6724253419714951f, 7.6794800995054464f,
    7.6865005271832185f, 7.6934869574993252f,
    7.7004397181410917f, 7.7073591320808825f,
    7.7142455176661224f, 7.7210991887071855f,
    7.7279204545631987f, 7.7347096202258383f,
    7.7414669864011464f, 7.7481928495894605f,
    7.7548875021634682f, 7.7615512324444795f,
    7.7681843247769259f, 7.7747870596011736f,
    7.7813597135246599f, 7.7879025593914317f,
    7.7944158663501061f, 7.8008998999203047f,
    7.8073549220576037f, 7.8137811912170374f,
    7.8201789624151878f, 7.8265484872909150f,
    7.8328900141647412f, 7.8392037880969436f,
    7.8454900509443747f, 7.8517490414160571f,
    7.8579809951275718f, 7.8641861446542797f,
    7.8703647195834047f, 7.8765169465649993f,
    7.8826430493618415f, 7.8887432488982591f,
    7.8948177633079437f, 7.9008668079807486f,
    7.9068905956085187f, 7.9128893362299619f,
    7.9188632372745946f, 7.9248125036057812f,
    7.9307373375628866f, 7.9366379390025709f,
    7.9425145053392398f, 7.9483672315846778f,
    7.9541963103868749f, 7.9600019320680805f,
    7.9657842846620869f, 7.9715435539507719f,
    7.9772799234999167f, 7.9829935746943103f,
    7.9886846867721654f, 7.9943534368588577f
};

const float kWP2SLog2Table[kLogLookupIdxMax] = {
    0.00000000f,    0.00000000f,  2.00000000f,   4.75488750f,
    8.00000000f,   11.60964047f,  15.50977500f,  19.65148445f,
    24.00000000f,  28.52932501f,  33.21928095f,  38.05374781f,
    43.01955001f,  48.10571634f,  53.30296891f,  58.60335893f,
    64.00000000f,  69.48686830f,  75.05865003f,  80.71062276f,
    86.43856190f,  92.23866588f,  98.10749561f,  104.04192499f,
    110.03910002f, 116.09640474f, 122.21143267f, 128.38196256f,
    134.60593782f, 140.88144886f, 147.20671787f, 153.58008562f,
    160.00000000f, 166.46500594f, 172.97373660f, 179.52490559f,
    186.11730005f, 192.74977453f, 199.42124551f, 206.13068654f,
    212.87712380f, 219.65963219f, 226.47733176f, 233.32938445f,
    240.21499122f, 247.13338933f, 254.08384998f, 261.06567603f,
    268.07820003f, 275.12078236f, 282.19280949f, 289.29369244f,
    296.42286534f, 303.57978409f, 310.76392512f, 317.97478424f,
    325.21187564f, 332.47473081f, 339.76289772f, 347.07593991f,
    354.41343574f, 361.77497759f, 369.16017124f, 376.56863518f,
    384.00000000f, 391.45390785f, 398.93001188f, 406.42797576f,
    413.94747321f, 421.48818752f, 429.04981119f, 436.63204548f,
    444.23460010f, 451.85719280f, 459.49954906f, 467.16140179f,
    474.84249102f, 482.54256363f, 490.26137307f, 497.99867911f,
    505.75424759f, 513.52785023f, 521.31926438f, 529.12827280f,
    536.95466351f, 544.79822957f, 552.65876890f, 560.53608414f,
    568.42998244f, 576.34027536f, 584.26677867f, 592.20931226f,
    600.16769996f, 608.14176943f, 616.13135206f, 624.13628279f,
    632.15640007f, 640.19154569f, 648.24156472f, 656.30630539f,
    664.38561898f, 672.47935976f, 680.58738488f, 688.70955430f,
    696.84573069f, 704.99577935f, 713.15956818f, 721.33696754f,
    729.52785023f, 737.73209140f, 745.94956849f, 754.18016116f,
    762.42375127f, 770.68022275f, 778.94946161f, 787.23135586f,
    795.52579543f, 803.83267219f, 812.15187982f, 820.48331383f,
    828.82687147f, 837.18245171f, 845.54995518f, 853.92928416f,
    862.32034249f, 870.72303558f, 879.13727036f, 887.56295522f,
    896.00000000f, 904.44831595f, 912.90781569f, 921.37841320f,
    929.86002376f, 938.35256392f, 946.85595152f, 955.37010560f,
    963.89494641f, 972.43039537f, 980.97637504f, 989.53280911f,
    998.09962237f, 1006.67674069f, 1015.26409097f, 1023.86160116f,
    1032.46920021f, 1041.08681805f, 1049.71438560f, 1058.35183469f,
    1066.99909811f, 1075.65610955f, 1084.32280357f, 1092.99911564f,
    1101.68498204f, 1110.38033993f, 1119.08512727f, 1127.79928282f,
    1136.52274614f, 1145.25545758f, 1153.99735821f, 1162.74838989f,
    1171.50849518f, 1180.27761738f, 1189.05570047f, 1197.84268914f,
    1206.63852876f, 1215.44316535f, 1224.25654560f, 1233.07861684f,
    1241.90932703f, 1250.74862473f, 1259.59645914f, 1268.45278005f,
    1277.31753781f, 1286.19068338f, 1295.07216828f, 1303.96194457f,
    1312.85996488f, 1321.76618236f, 1330.68055071f, 1339.60302413f,
    1348.53355734f, 1357.47210556f, 1366.41862452f, 1375.37307041f,
    1384.33539991f, 1393.30557020f, 1402.28353887f, 1411.26926400f,
    1420.26270412f, 1429.26381818f, 1438.27256558f, 1447.28890615f,
    1456.31280014f, 1465.34420819f, 1474.38309138f, 1483.42941118f,
    1492.48312945f, 1501.54420843f, 1510.61261078f, 1519.68829949f,
    1528.77123795f, 1537.86138993f, 1546.95871952f, 1556.06319119f,
    1565.17476976f, 1574.29342040f, 1583.41910860f, 1592.55180020f,
    1601.69146137f, 1610.83805860f, 1619.99155871f, 1629.15192882f,
    1638.31913637f, 1647.49314911f, 1656.67393509f, 1665.86146266f,
    1675.05570047f, 1684.25661744f, 1693.46418280f, 1702.67836605f,
    1711.89913698f, 1721.12646563f, 1730.36032233f, 1739.60067768f,
    1748.84750254f, 1758.10076802f, 1767.36044551f, 1776.62650662f,
    1785.89892323f, 1795.17766747f, 1804.46271172f, 1813.75402857f,
    1823.05159087f, 1832.35537170f, 1841.66534438f, 1850.98148244f,
    1860.30375965f, 1869.63214999f, 1878.96662767f, 1888.30716711f,
    1897.65374295f, 1907.00633003f, 1916.36490342f, 1925.72943838f,
    1935.09991037f, 1944.47629506f, 1953.85856831f, 1963.24670620f,
    1972.64068498f, 1982.04048108f, 1991.44607117f, 2000.85743204f,
    2010.27454072f, 2019.69737440f, 2029.12591044f, 2038.56012640f
};

#if defined(WP2_NEED_LOG_TABLE_8BIT)
const uint8_t WP2LogTable8bit[256] = {   // 31 ^ clz(i)
    0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7
};
#endif

static float SLog2Slow_C(uint32_t v) {
  assert(v >= kLogLookupIdxMax);
  if (v < kApproxLogWithCorrectionMax) {
    uint32_t log_v = 0;
    uint32_t y = 1;
    const float v_f = (float)v;
    const uint32_t orig_v = v;
    do {
      ++log_v;
      v = v >> 1;
      y = y << 1;
    } while (v >= kLogLookupIdxMax);
    // vf = (2^log_v) * Xf; where y = 2^log_v and Xf < 256
    // Xf = floor(Xf) * (1 + (v % y) / v)
    // log2(Xf) = log2(floor(Xf)) + log2(1 + (v % y) / v)
    // The correction factor: log(1 + d) ~ d; for very small d values, so
    // log2(1 + (v % y) / v) ~ (1/log(2)) * (v % y)/v
    const float correction = 1.442695041f * (orig_v & (y - 1));
    return v_f * (kWP2Log2Table[v] + log_v) + correction;
  } else {
    return v * std::log2(v);
  }
}

static float Log2Slow_C(uint32_t v) {
  assert(v >= kLogLookupIdxMax);
  if (v < kApproxLogWithCorrectionMax) {
    // this version is 30% faster than calling log2(v), but a bit less precise
    uint32_t log_v = 0;
    uint32_t y = 1;
    const uint32_t orig_v = v;
    do {
      log_v += 1;
      v = v >> 1;
      y = y << 1;
    } while (v >= kLogLookupIdxMax);
    float log_2 = kWP2Log2Table[v] + log_v;
    if (log_v >= kApproxLogMax) {
      // Since the division is still expensive, add this correction factor only
      // for large values of 'v'.
      const float correction = 1.442695041f * (orig_v & (y - 1));
      log_2 += correction / orig_v;
    }
    return log_2;
  } else {
    return std::log2(v);
  }
}

namespace {
int32_t InnerProduct_C(const int16_t* const a, const int16_t* const b,
                       size_t size) {
  return std::inner_product(a, a + size, b, 0);
}

#if defined(WP2_USE_SSE)

int32_t InnerProduct_SSE(const int16_t* const a, const int16_t* const b,
                         size_t size) {
  assert(size > 0);
  size_t i = 0;
  __m128i sum = _mm_setzero_si128();
  while (i + 8 <= size) {
    const __m128i a0 = _mm_loadu_si128((const __m128i*)(a + i));
    const __m128i b0 = _mm_loadu_si128((const __m128i*)(b + i));
    const __m128i c = _mm_madd_epi16(a0, b0);
    sum = _mm_add_epi32(sum, c);
    i += 8;
  }
  if (i + 4 <= size) {
    const __m128i a0 = _mm_loadl_epi64((const __m128i*)(a + i));
    const __m128i b0 = _mm_loadl_epi64((const __m128i*)(b + i));
    const __m128i c = _mm_madd_epi16(a0, b0);
    sum = _mm_add_epi32(sum, c);
    i += 4;
  }
  if (size >= 8) sum = _mm_add_epi32(sum, _mm_srli_si128(sum, 8));
  int32_t res = 0;
  if (size >= 4) {
    sum = _mm_add_epi32(sum, _mm_srli_si128(sum, 4));
    res = _mm_cvtsi128_si32(sum);
  }

  for (; i < size; ++i) res += a[i] * b[i];
  return res;
}

#if 0
// This version is 30% slower than the C version, so leave it documented here.
// Maybe one day this code could be useful inspiration if we have to compute
// *several* log2()'s in parallel.
static float Log2Slow_SSE(uint32_t v) {
  const float kRec2[4] = {   // 2. / log(2.) / (2*k + 1)
    2.885390043f, 0.961796701f, 0.577077985f, 0.412198573f
  };
  assert(v >= kLogLookupIdxMax);
  const uint32_t N = WP2Log2Floor(v);
  // compute correction with quadratic convergence
  const uint32_t K = 1 << N;
  const float u = (v - K) / (float)(v + K);   // < 1.0
  const float U2 = u * u;
  const float U4 = U2 * U2;
  const __m128 eps = _mm_set_ps(U4 * U2, U4, U2, 1.);
  const __m128 coeffs = _mm_load_ps(kRec2);
  const __m128 correction = _mm_dp_ps(eps, coeffs, 0xff);
  const float extra = u * _mm_cvtss_f32(correction);
  return N + extra;
}
#endif

WP2_TSAN_IGNORE_FUNCTION void WP2MathInitSSE() {
  WP2InnerProduct = InnerProduct_SSE;
//  WP2Log2Slow = Log2Slow_SSE;
}

#endif  // WP2_USE_SSE

}  // namespace

namespace WP2 {

//------------------------------------------------------------------------------
// Divide-by-alpha

const uint32_t kAlphaDiv[256] = {   // kAlphaDiv[a] = ((255 << 16) + a - 1) / a
  0x0, 0xff0000,
  0x7f8000, 0x550000, 0x3fc000, 0x330000, 0x2a8000, 0x246db7, 0x1fe000,
  0x1c5556, 0x198000, 0x172e8c, 0x154000, 0x139d8a, 0x1236dc, 0x110000,
  0xff000, 0xf0000, 0xe2aab, 0xd6bcb, 0xcc000, 0xc2493, 0xb9746, 0xb1643,
  0xaa000, 0xa3334, 0x9cec5, 0x971c8, 0x91b6e, 0x8cb09, 0x88000, 0x839cf,
  0x7f800, 0x7ba2f, 0x78000, 0x74925, 0x71556, 0x6e454, 0x6b5e6, 0x689d9,
  0x66000, 0x63832, 0x6124a, 0x5ee24, 0x5cba3, 0x5aaab, 0x58b22, 0x56cf0,
  0x55000, 0x5343f, 0x5199a, 0x50000, 0x4e763, 0x4cfb3, 0x4b8e4, 0x4a2e9,
  0x48db7, 0x47944, 0x46585, 0x45271, 0x44000, 0x42e2a, 0x41ce8, 0x40c31,
  0x3fc00, 0x3ec4f, 0x3dd18, 0x3ce55, 0x3c000, 0x3b217, 0x3a493, 0x39770,
  0x38aab, 0x37e40, 0x3722a, 0x36667, 0x35af3, 0x34fcb, 0x344ed, 0x33a55,
  0x33000, 0x325ee, 0x31c19, 0x31282, 0x30925, 0x30000, 0x2f712, 0x2ee59,
  0x2e5d2, 0x2dd7c, 0x2d556, 0x2cd5d, 0x2c591, 0x2bdf0, 0x2b678, 0x2af29,
  0x2a800, 0x2a0fe, 0x29a20, 0x29365, 0x28ccd, 0x28657, 0x28000, 0x279ca,
  0x273b2, 0x26db7, 0x267da, 0x26218, 0x25c72, 0x256e7, 0x25175, 0x24c1c,
  0x246dc, 0x241b3, 0x23ca2, 0x237a7, 0x232c3, 0x22df3, 0x22939, 0x22493,
  0x22000, 0x21b82, 0x21715, 0x212bc, 0x20e74, 0x20a3e, 0x20619, 0x20205,
  0x1fe00, 0x1fa0c, 0x1f628, 0x1f253, 0x1ee8c, 0x1ead4, 0x1e72b, 0x1e38f,
  0x1e000, 0x1dc80, 0x1d90c, 0x1d5a4, 0x1d24a, 0x1cefb, 0x1cbb8, 0x1c881,
  0x1c556, 0x1c235, 0x1bf20, 0x1bc15, 0x1b915, 0x1b61f, 0x1b334, 0x1b052,
  0x1ad7a, 0x1aaab, 0x1a7e6, 0x1a52a, 0x1a277, 0x19fcc, 0x19d2b, 0x19a91,
  0x19800, 0x19578, 0x192f7, 0x1907e, 0x18e0d, 0x18ba3, 0x18941, 0x186e6,
  0x18493, 0x18246, 0x18000, 0x17dc2, 0x17b89, 0x17958, 0x1772d, 0x17508,
  0x172e9, 0x170d1, 0x16ebe, 0x16cb2, 0x16aab, 0x168aa, 0x166af, 0x164b9,
  0x162c9, 0x160de, 0x15ef8, 0x15d18, 0x15b3c, 0x15966, 0x15795, 0x155c8,
  0x15400, 0x1523e, 0x1507f, 0x14ec5, 0x14d10, 0x14b5f, 0x149b3, 0x1480b,
  0x14667, 0x144c7, 0x1432c, 0x14194, 0x14000, 0x13e71, 0x13ce5, 0x13b5d,
  0x139d9, 0x13859, 0x136dc, 0x13563, 0x133ed, 0x1327b, 0x1310c, 0x12fa1,
  0x12e39, 0x12cd5, 0x12b74, 0x12a16, 0x128bb, 0x12763, 0x1260e, 0x124bd,
  0x1236e, 0x12223, 0x120da, 0x11f94, 0x11e51, 0x11d11, 0x11bd4, 0x11a99,
  0x11962, 0x1182c, 0x116fa, 0x115ca, 0x1149d, 0x11372, 0x1124a, 0x11124,
  0x11000, 0x10ee0, 0x10dc1, 0x10ca5, 0x10b8b, 0x10a73, 0x1095e, 0x1084b,
  0x1073a, 0x1062c, 0x1051f, 0x10415, 0x1030d, 0x10207, 0x10103, 0x10000,
};

//------------------------------------------------------------------------------

// 31b-range values
const uint32_t PseudoRNG::kRandomTable[] = {
  0x0de15230, 0x03b31886, 0x775faccb, 0x1c88626a, 0x68385c55, 0x14b3b828,
  0x4a85fef8, 0x49ddb84b, 0x64fcf397, 0x5c550289, 0x4a290000, 0x0d7ec1da,
  0x5940b7ab, 0x5492577d, 0x4e19ca72, 0x38d38c69, 0x0c01ee65, 0x32a1755f,
  0x5437f652, 0x5abb2c32, 0x0faa57b1, 0x73f533e7, 0x685feeda, 0x7563cce2,
  0x6e990e83, 0x4730a7ed, 0x4fc0d9c6, 0x496b153c, 0x4f1403fa, 0x541afb0c,
  0x73990b32, 0x26d7cb1c, 0x6fcc3706, 0x2cbb77d8, 0x75762f2a, 0x6425ccdd,
  0x24b35461, 0x0a7d8715, 0x220414a8, 0x141ebf67, 0x56b41583, 0x73e502e3,
  0x44cab16f, 0x28264d42, 0x73baaefb, 0x0a50ebed, 0x1d6ab6fb, 0x0d3ad40b,
  0x35db3b68, 0x2b081e83, 0x77ce6b95, 0x5181e5f0, 0x78853bbc, 0x009f9494,
  0x27e5ed3c
};

PseudoRNG::PseudoRNG() : index1_(0), index2_(31) {
  memcpy(tab_, kRandomTable, sizeof(tab_));
}

int32_t PseudoRNG::Update() {
  const int32_t diff = tab_[index1_] - tab_[index2_];
  tab_[index1_] = diff;
  if (++index1_ == kTabSize) index1_ = 0;
  if (++index2_ == kTabSize) index2_ = 0;
  return diff;
}

}  // namespace WP2

//------------------------------------------------------------------------------

WP2Log2SlowFunc WP2Log2Slow;
WP2Log2SlowFunc WP2SLog2Slow;
WP2InnerProductFunc WP2InnerProduct;

static volatile WP2CPUInfo math_last_cpuinfo_used =
    (WP2CPUInfo)&math_last_cpuinfo_used;

WP2_TSAN_IGNORE_FUNCTION void WP2MathInit() {
  if (math_last_cpuinfo_used == WP2GetCPUInfo) return;

  WP2Log2Slow = Log2Slow_C;
  WP2SLog2Slow = SLog2Slow_C;
  WP2InnerProduct = InnerProduct_C;

  if (WP2GetCPUInfo != nullptr) {
#if defined(WP2_USE_SSE)
    if (WP2GetCPUInfo(kSSE)) WP2MathInitSSE();
#endif
  }
  math_last_cpuinfo_used = WP2GetCPUInfo;
}
